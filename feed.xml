<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DocuSign Dev Blog</title><atom:link href="undefined/feed.xml" rel="self" type="application/rss+xml"></atom:link><link></link><description>Brought to you by the development teams at DocuSign</description><pubDate>Thu, 16 Oct 2014 17:00:00 -0700</pubDate><generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator><language>en</language><item><title>Americano, made with an improved Espresso machine.</title><link>undefined/articles/americano-made-with-an-improved-espresso-machine/</link><pubDate>Thu, 16 Oct 2014 17:00:00 -0700</pubDate><guid isPermaLink="true">undefined/articles/americano-made-with-an-improved-espresso-machine/</guid><author></author><description>&lt;p&gt;Today we are publishing &lt;a href=&quot;https://github.com/DocuSignDev/americano&quot;&gt;Americano&lt;/a&gt;, an open source Android library of helpers to build on top of &lt;a href=&quot;https://code.google.com/p/android-test-kit&quot;&gt;Espresso&lt;/a&gt;, an Android API by Google for writing reliable UI tests. Along with the release of Americano, we also want to cover the useful improvements we’ve made to &lt;a href=&quot;https://github.com/DocuSignDev/android-test-kit&quot;&gt;our own fork of Espresso&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The two are meant to be used together, but if need be, Americano can be used completely with the current version of Espresso released by Google.&lt;/p&gt;
&lt;h2 id=&quot;espresso-faster-running-and-debugging&quot;&gt;Espresso: Faster Running and Debugging&lt;/h2&gt;
&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;/h3&gt;
&lt;p&gt;When running functional UI tests, the biggest drain is almost always time. At first we felt an excessive drain with Espresso, especially if any test required a &lt;code&gt;waitFor(time, assert)&lt;/code&gt; assertion. We found that if the app moved between root windows at all during the test (e.g. started a new activity, or opened a dialog) the assertion would wait for the full time requested before finding the most present window and performing the assertion.&lt;/p&gt;
&lt;p&gt;To fix this, Espresso now maintains multiple root windows and listens for them to be added rather than waiting to update the selected window at specific times. This allows us to follow all view hierarchy changes and assert as soon as the view we are looking for is present.&lt;/p&gt;
&lt;h3 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h3&gt;
&lt;p&gt;Possibly the most useful of the improvements, Espresso will now capture screenshots leading up to a test failure and the final screenshot of where an assertion or attempted action failed. This makes debugging the view hierarchy that is printed to the console by Espresso quick and easier to understand. Espresso will dump only the failure screenshots into the &lt;a href=&quot;https://github.com/DocuSignDev/android-test-kit#screenshots&quot;&gt;test results directory.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;americano-describing-the-finer-details&quot;&gt;Americano: Describing the Finer Details&lt;/h2&gt;
&lt;p&gt;With Americano, our goal was to provide a few more useful methods for describing a specific view among a giant group of similar views. For that, we’ve added a few different types of &lt;a href=&quot;https://code.google.com/p/android-test-kit/source/browse/espresso/lib/src/main/java/com/google/android/apps/common/testing/ui/espresso/matcher/ViewMatchers.java&quot;&gt;View “Matchers”&lt;/a&gt; for Espresso.&lt;/p&gt;
&lt;h3 id=&quot;dimensional-matchers&quot;&gt;Dimensional Matchers&lt;/h3&gt;
&lt;p&gt;These are meant to help locate a view that should be next, overlapping or under another view. For this, we’ve added the &lt;code&gt;DimensionalMatchers&lt;/code&gt; class. The dimensional matchers will find you any view that has the relation requested to your view.&lt;/p&gt;
&lt;p&gt;Below, the matcher &lt;code&gt;entirelyAbove&lt;/code&gt; is returning all views that are above and not overlapping “Forgot Password?”, and then asserting that “Log In” is one of them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;onView(withText(&lt;span class=&quot;string&quot;&gt;&quot;Log In&quot;&lt;/span&gt;))
    .check(matches(is(entirelyAbove(withText(&lt;span class=&quot;string&quot;&gt;&quot;Forgot Password?&quot;&lt;/span&gt;)))));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full list of dimensional helpers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;above&lt;/code&gt;, &lt;code&gt;entirelyAbove&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;below&lt;/code&gt;, &lt;code&gt;entirelyBelow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leftOf&lt;/code&gt;, &lt;code&gt;entirelyLeftOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rightOf&lt;/code&gt;, &lt;code&gt;entirelyRightOf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ranking-matchers&quot;&gt;Ranking Matchers&lt;/h3&gt;
&lt;p&gt;Along with the relational helpers, there is also a class of &lt;code&gt;RankingMatchers&lt;/code&gt;. The ranking matchers will find the leftmost, lowest or even widest view by the description given.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;onView(lowest(withText(&lt;span class=&quot;string&quot;&gt;&quot;Log In&quot;&lt;/span&gt;)))
    .perform(click());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full list of ranking matchers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mostleft&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mostright&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;widest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skinniest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tallest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shortest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These improvements to Espresso and additions of Americano have helped immensely while creating a robust and reliable test suite for Android. Have a look at &lt;a href=&quot;https://github.com/DocuSignDev/americano&quot;&gt;Americano&lt;/a&gt; and our &lt;a href=&quot;https://github.com/DocuSignDev/android-test-kit&quot;&gt;Espresso fork&lt;/a&gt; to get going.&lt;/p&gt;
&lt;p&gt;Be sure to send any virtual high fives to the developers that made this happen: &lt;a href=&quot;https://github.com/tophyr&quot;&gt;@tophyr&lt;/a&gt;, &lt;a href=&quot;https://github.com/abeatte&quot;&gt;@abeatte&lt;/a&gt; and &lt;a href=&quot;https://github.com/stephenparish&quot;&gt;@stephenparish&lt;/a&gt;.&lt;/p&gt;
</description></item><item><title>Jeeves, an Open Source Webdriver</title><link>undefined/articles/jeeves-an-open-source-webdriver/</link><pubDate>Mon, 02 Jun 2014 17:00:00 -0700</pubDate><guid isPermaLink="true">undefined/articles/jeeves-an-open-source-webdriver/</guid><author></author><description>&lt;p&gt;Our &lt;a href=&quot;http://engineering.docusign.com/articles/the-new-docusign-experience-all-in-javascript/&quot;&gt;previous post&lt;/a&gt; covered
a high-level overview of the tech stack behind the &lt;a href=&quot;https://www.docusign.com/new-experience&quot;&gt;New DocuSign Experience&lt;/a&gt;
(or as it’s still called internally, &lt;em&gt;Martini&lt;/em&gt;). Today, we’re excited to announce the release of our open source webdriver,
&lt;a href=&quot;https://github.com/DocuSignDev/Jeeves&quot;&gt;Jeeves&lt;/a&gt;, a tool that helps ease the pain of writing automated browser UI tests.
This tool is the cornerstone of our test framework and drives nearly all of our UI automation for the New DocuSign Experience.
This post explains the reasons why we built it, and how it differs from other currently available tools.&lt;/p&gt;
&lt;h2 id=&quot;why-did-we-build-jeeves-&quot;&gt;Why did we build Jeeves?&lt;/h2&gt;
&lt;p&gt;To fully understand why we built Jeeves, it will help to explain the problems we faced before it was built. With any
large-scale enterprise software product, automated testing is an absolute must. This is especially true if the goal is to
rapidly iterate based on feedback and release often. Initially our automated test suite used the official
&lt;a href=&quot;https://www.npmjs.org/package/selenium-webdriver&quot;&gt;&lt;code&gt;selenium-webdriver&lt;/code&gt;&lt;/a&gt; module. We experienced flakiness with its promises implementation, and our thin abtraction layer over it was rife with explicit waits, inconsistent interfaces, and unexplained timeouts 
which translated to an unreliable test suite. This led to extremely low productivity for our QA engineers while they spent time
trying to discern if a failure was real or just the result of some unexpected timeout. Since there were only two QA engineers
on the Martini team at that time, all the time we wasted chasing down intermittent test failures due to problems with the
framework meant that we were struggling to keep up with our automation coverage goals.&lt;/p&gt;
&lt;p&gt;Frustrated by the problems with the existing test framework architecture, I wanted to design something that would not only
solve our problems with test reliability, but also reduce complexity and make it easier for non-QA engineers to write and debug
tests. To improve our test reliability, we needed to start with a foundation that is maintained regularly and works across
different browsers. The obvious choice to fill this need was &lt;a href=&quot;https://github.com/admc/wd&quot;&gt;&lt;code&gt;wd&lt;/code&gt;&lt;/a&gt;, which implements the
&lt;a href=&quot;https://code.google.com/p/selenium/wiki/JsonWireProtocol&quot;&gt;Selenium JSON Wire Protocol&lt;/a&gt;
while still supporting &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;.
We also needed a solution that would work with our existing tests (all written in the Node.js callback style), and we wanted
something that would simplify the introduction to our test framework for new team members.&lt;/p&gt;
&lt;h2 id=&quot;how-is-jeeves-different-&quot;&gt;How is Jeeves different?&lt;/h2&gt;
&lt;p&gt;With the amazing &lt;code&gt;wd&lt;/code&gt; module at the core of Jeeves, the logical question you might ask is, “Why not just &lt;code&gt;wd&lt;/code&gt; instead of
building a wrapper?” While this is a valid concern, &lt;code&gt;wd&lt;/code&gt; alone did not strike at the heart of the secondary problem I was
trying to solve: to make writing UI tests quick &amp;amp; easy. While &lt;code&gt;wd&lt;/code&gt; is extremely flexible in terms of the browser &amp;amp; element
interactions it provides, it still lacks some nice-to-have features which can somewhat deter or hinder the average feature
developer from effectively writing tests with it.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jeeves answers this by offering some helpful additions which include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detailed logging on all method calls, and optionally displayed logging from &lt;code&gt;wd&lt;/code&gt; itself.&lt;ul&gt;
&lt;li&gt;Extra logging allows for quicker debugging from the console output, even while the tests are still running!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple abstraction for writing a named series of steps&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Jeeves.namedSteps&lt;/code&gt; is a nifty wrapper around &lt;a href=&quot;https://github.com/caolan/async#seriestasks-callback&quot;&gt;&lt;code&gt;async.series&lt;/code&gt;&lt;/a&gt;
with extra logging that can happen before/after each step in the series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DocuSignDev/Jeeves/blob/master/examples/saucelabs.coffee&quot;&gt;An example of this feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hassle-free screenshots! &lt;code&gt;Jeeves.takeScreenshot&lt;/code&gt; handles saving the raw image buffer to a configurable directory.&lt;ul&gt;
&lt;li&gt;Saving screenshots from image buffers is not hard, but it shouldn’t clutter your test code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jeeves also implements two methods for element drag &amp;amp; drop even though this feature is not directly supported
by &lt;code&gt;wd&lt;/code&gt; or Selenium JSON Wire Protocol&lt;/li&gt;
&lt;li&gt;Jeeves provides two ways for interacting with elements.&lt;ul&gt;
&lt;li&gt;You can use the traditional method of finding the element first, and then calling a separate method to interact with it.&lt;ul&gt;
&lt;li&gt;E.g.:&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;it &lt;span class=&quot;string&quot;&gt;'should click the div'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(done)&lt;/span&gt; -&amp;gt;&lt;/span&gt;
  Jeeves.getElementByCss &lt;span class=&quot;string&quot;&gt;'div.clickable'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(err, elem)&lt;/span&gt; -&amp;gt;&lt;/span&gt;
    Jeeves.clickElement elem, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(err)&lt;/span&gt; -&amp;gt;&lt;/span&gt;
      done err&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Or you can append one of the convenience suffixes to make the method do the element finding for you.&lt;ul&gt;
&lt;li&gt;Such as:&lt;ul&gt;
&lt;li&gt;ByClassName&lt;/li&gt;
&lt;li&gt;ByCssSelector&lt;/li&gt;
&lt;li&gt;ById&lt;/li&gt;
&lt;li&gt;ByName&lt;/li&gt;
&lt;li&gt;ByLinkText&lt;/li&gt;
&lt;li&gt;ByPartialLinkText&lt;/li&gt;
&lt;li&gt;ByTagName&lt;/li&gt;
&lt;li&gt;ByXPath&lt;/li&gt;
&lt;li&gt;ByCss&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E.g.:&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;it &lt;span class=&quot;string&quot;&gt;'should click the div'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(done)&lt;/span&gt; -&amp;gt;&lt;/span&gt;
  Jeeves.clickElementByCss &lt;span class=&quot;string&quot;&gt;'div.clickable'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(err)&lt;/span&gt; -&amp;gt;&lt;/span&gt;
    done err&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UI tests are not synchronous, so we need to wait for elements, URL changes, and the occasional attribute.&lt;ul&gt;
&lt;li&gt;Jeeves extends &lt;code&gt;wd&lt;/code&gt;‘s &lt;code&gt;waitFor&lt;/code&gt; pattern to wait for more than just elements:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForUrlToChange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForVisibleElementBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForElementToHideBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForAttributeBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForAnyTextBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForSpecificTextBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForAndGetTextBy...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jeeves.waitForAndClickElementBy...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These enhancements which Jeeves adds on top of the reliable &lt;code&gt;wd&lt;/code&gt; core have proven to be powerful tools for maintaining a
large suite of automated browser UI tests. Check out our &lt;a href=&quot;https://github.com/DocuSignDev/Jeeves/tree/master/examples&quot;&gt;examples&lt;/a&gt;
to see how you can get started.&lt;/p&gt;
</description></item><item><title>The new DocuSign experience, all in Javascript</title><link>undefined/articles/the-new-docusign-experience-all-in-javascript/</link><pubDate>Sat, 29 Mar 2014 17:00:00 -0700</pubDate><guid isPermaLink="true">undefined/articles/the-new-docusign-experience-all-in-javascript/</guid><author></author><description>&lt;p&gt;&lt;a href=&quot;https://www.docusign.com/new-experience&quot;&gt;&lt;img src=&quot;/articles/the-new-docusign-experience-all-in-javascript/ndse_screenshot2.png&quot; alt=&quot;Screenshot of The New DocuSign Experience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We recently &lt;a href=&quot;https://www.docusign.com/blog/accelerating-the-digital-transformation-journey-with-the-docusign-spring-14-release?utm_source=HOOTSUITE&amp;amp;utm_medium=SOCIALPOSTS&amp;amp;utm_campaign=SEPTEMBER&quot;&gt;launched&lt;/a&gt; 
&lt;strong&gt;&lt;a href=&quot;https://www.docusign.com/new-experience&quot;&gt;The New DocuSign Experience&lt;/a&gt;&lt;/strong&gt;,
a reimagining of our primary web application used by 45 million users.&lt;/p&gt;
&lt;p&gt;The app is built in Node.js and uses the &lt;a href=&quot;https://www.docusign.com/developer-center/quick-start/overview&quot;&gt;REST API&lt;/a&gt;
as its data store. We’re proud to have built the entire app on an open-source stack, 
and plan to share a lot of our code in the coming months.&lt;/p&gt;
&lt;p&gt;We aimed to follow best practices throughout:
&lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; modular code;
automated deployment, provisioning, and continuous integration;
(a goal of) 100% automated front-end testing;
two-week sprints and releases, with scrums combining dev+QA+UX+product;
utilizing the latest browser capabilities while degrading gracefully for older browsers;
and using Git-flow and Github-style workflows.&lt;/p&gt;
&lt;p&gt;The project first began in June 2012 with one developer and a vision of
building the next-generation web app as a front-end layer on top of the
API. After a period of prototyping and setting the
groundwork, the project (codenamed &lt;em&gt;“Martini”&lt;/em&gt;) kicked into high gear
around a year ago. The team now consists of twelve developers, including three
dedicated to QA automation; a team of designers, two product managers,
and all the other amazing support (ops, program management, facilities)
that keep the servers humming and the stars aligned.&lt;/p&gt;
&lt;p&gt;We launched a public beta in September, and became DocuSign Beta; now
we’re official, but we still affectionately call the project and team &lt;em&gt;Martini&lt;/em&gt;. &lt;/p&gt;
&lt;h3 id=&quot;ubiquitous-javascript&quot;&gt;Ubiquitous Javascript&lt;/h3&gt;
&lt;p&gt;Martini is built on an all-Javascript (actually &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;) stack.
On the backend that includes &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;,
&lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;, &lt;a href=&quot;https://github.com/mikeal/request&quot;&gt;Request&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt;, among many other libraries.
Ubiquitous JS means we can share code and patterns between the front- and back-ends:
&lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone.js&lt;/a&gt; handles models, views, and routing client-side, as well as
parallel models server-side. All our coffee/js files use the same module
pattern, bundled by &lt;a href=&quot;https://github.com/sstephenson/stitch&quot;&gt;Stitch&lt;/a&gt; for the browser.
Templates on both sides are in &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt;.
&lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt; preprocesses our CSS.
We use &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; for sessions and
caching. The app uses the 
&lt;a href=&quot;https://www.docusign.com/developer-center/quick-start/overview&quot;&gt;DocuSign REST API&lt;/a&gt;
(a highly scalable, &lt;a href=&quot;http://en.wikipedia.org/wiki/Carrier_grade&quot;&gt;carrier grade&lt;/a&gt; 
system built on the .NET stack) as its data store,
so we don’t need a full database.   &lt;/p&gt;
&lt;p&gt;To support the entire new experience, &lt;a href=&quot;https://www.docusign.com/developer-center/quick-start/overview&quot;&gt;our API&lt;/a&gt;
grew from serving a relatively
narrow set of third-party use cases to supporting every customer-facing application function.
Not all of these API features are public yet, but they will be soon.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;beautiful-user-interface&quot;&gt;Beautiful user interface&lt;/h3&gt;
&lt;p&gt;Our in-house design team did incredible work designing the interactions and visuals of the new experience.
Our first developer, Derek, has an incredible passion
for pixel-perfection and seamless UI’s that led to a wonderful dev-design collaboration.
We used CSS3 (and where necessary, jQuery animations)
to bring the designs to life. If you’re using the app and are impressed by
a smooth transition or subtle effect, Derek is the main reason.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docusign.com/new-experience&quot;&gt;&lt;img src=&quot;/articles/the-new-docusign-experience-all-in-javascript/ndse_screenshot1.png&quot; alt=&quot;Screenshot of Tagger interface&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;data-router&quot;&gt;Data router&lt;/h3&gt;
&lt;p&gt;We built a layer on top of &lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone.js&lt;/a&gt; which enables modular, re-usable components and
a very snappy UI. Models are the basic building blocks and their
types and hierarchy are shared between client and server. Routes are defined in a
“route data” mapping, with the models and attributes that belong to each route.
The server processes this mapping through Express middleware, and the client through the Backbone
router. On initial load, the server knows all the data that the client
wants and gets it from the API; when the browser asks for the same data
a moment later, the data is either already in Redis to be
delivered instantly, or on its way. Subsequent routes are handled
entirely on the client when possible (degrading gracefully back to IE8).&lt;/p&gt;
&lt;p&gt;The models have views associated with them in the route-data mapping;
each view attaches itself to a parent element, down from the thin layout
rendered on the server to any level deep of client-side nesting.
Everything is decoupled and DOM elements that should persist
from one route to another are left intact.&lt;/p&gt;
&lt;p&gt;We plan to extract this framework from the app and open source it. We
think it is well suited to apps like ours: API-backed, client-heavy
(everything is authenticated so we have no need to render from the
server to search engines), with a complex data hierarchy and multi-use
components.&lt;/p&gt;
&lt;h3 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h3&gt;
&lt;p&gt;This has been one of the most challenging parts of the journey so far,
and while we we haven’t quite achieved 100% automated
test coverage, we are getting close, and in the process we have built a
testing tool chain that we want to open-source. Our test runner parallelizes
multiple &lt;a href=&quot;http://visionmedia.github.io/mocha/&quot;&gt;Mocha&lt;/a&gt;
tests simultaneously and aggregates the results into a
single XUnit file for &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;. Our “driver wrapper” adds a layer of
utilities to the &lt;a href=&quot;https://github.com/admc/wd&quot;&gt;WD&lt;/a&gt; module. We’ve added syntactic sugar on top of Mocha
to define test levels (smoke, acceptance, etc) inline. The tests can run
in &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; via &lt;a href=&quot;https://github.com/detro/ghostdriver&quot;&gt;GhostDriver&lt;/a&gt;
(which we’ve improved to &lt;a href=&quot;https://github.com/detro/ghostdriver/pull/324&quot;&gt;handle file uploads&lt;/a&gt;)
or via a real browser using Selenium, as well as with numerous
virtual browsers via &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;redis-sentinel-client&quot;&gt;Redis Sentinel client&lt;/h3&gt;
&lt;p&gt;As we &lt;a href=&quot;http://engineering.docusign.com/articles/redis-sentinel-client-nodejs/&quot;&gt;wrote a few months ago&lt;/a&gt;, 
we are using &lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;Redis Sentinel&lt;/a&gt; with
master/slaves for failover and redundancy, and we wrote a
&lt;a href=&quot;https://github.com/DocuSignDev/node-redis-sentinel-client&quot;&gt;node.js client&lt;/a&gt;
to make Sentinel seamless, working the same as a regular Redis client.
(We’re also looking forward to Redis Cluster and hoping it will take
Redis reliability to the next level.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The last few months have been heads-down in the code finishing the
features and fixing bugs for our launch. Now that we’re live, we’re
looking forward to taking a deep breath and a step back, and re-imagining
even more. We made assumptions and decisions a year ago that we might
make differently on a blank slate today. We wrote a lot of code that
serves general use cases, and we want to share that with the open source
community, to give back and get valuable feedback. Like any big software
project, we have technical debt to clean up and test suites to
finish. And of course, we still have tons of features to build, known
and yet-unknown, for the future of 
&lt;a href=&quot;https://www.docusign.com/how-it-works/digital-transaction-management&quot;&gt;Digital Transaction Management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;&lt;a href=&quot;https://www.docusign.com/trial&quot;&gt;sign up for an account&lt;/a&gt;&lt;/strong&gt; and try it out! We hope you love the new experience
and look forward to learning from all your feedback.&lt;/p&gt;
&lt;p&gt;Also, &lt;strong&gt;&lt;a href=&quot;https://www.docusign.com/company/careers&quot;&gt;we’re hiring more developers&lt;/a&gt;&lt;/strong&gt;!
If you’re a software engineer and this product and tech stack excite you, please &lt;a href=&quot;https://www.docusign.com/company/careers&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description></item><item><title>Absolutely Relatively, Floatless</title><link>undefined/articles/absolutely-relatively-floatless/</link><pubDate>Wed, 15 Jan 2014 16:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/absolutely-relatively-floatless/</guid><author></author><description>&lt;h4 id=&quot;or-how-i-learned-to-stop-using-floats-and-love-absolute-positioning-&quot;&gt;Or how I learned to stop using floats and love absolute positioning.&lt;/h4&gt;
&lt;h3 id=&quot;part-1-bootstrap-style-floats-without-floats&quot;&gt;Part 1: Bootstrap style floats without floats&lt;/h3&gt;
&lt;p&gt;Lets say you want to have some things.&lt;/p&gt;
&lt;p&gt;10 things.&lt;/p&gt;
&lt;p&gt;Each thing has “words and stuff” in it.&lt;/p&gt;
&lt;p&gt;Observe:&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/absolutely-relatively-floatless/1.gif&quot;&gt;&lt;img src=&quot;/articles/absolutely-relatively-floatless/1.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/proksoup/8448707.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Lets say you want those things to be like a table.&lt;/p&gt;
&lt;p&gt;With rows and columns.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And&lt;/em&gt; you want less columns when you change width.&lt;/p&gt;
&lt;p&gt;Observe:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/absolutely-relatively-floatless/2.gif&quot;&gt;&lt;img src=&quot;/articles/absolutely-relatively-floatless/2.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/proksoup/8448714.js&quot;&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h3 id=&quot;part-2-what-does-this-have-to-do-with-position-absolute-&quot;&gt;Part 2: What does this have to do with position absolute?&lt;/h3&gt;
&lt;p&gt;We use position relative on our table cell.&lt;/p&gt;
&lt;p&gt;We use position absolute on our text and pic within the table cell.&lt;/p&gt;
&lt;p&gt;Observe:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/absolutely-relatively-floatless/3.gif&quot;&gt;&lt;img src=&quot;/articles/absolutely-relatively-floatless/3.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/proksoup/8448716.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Check out the full code here: &lt;a href=&quot;http://codepen.io/proksoup/pen/oFhDj&quot;&gt;&lt;a href=&quot;http://codepen.io/proksoup/pen/oFhDj&quot;&gt;http://codepen.io/proksoup/pen/oFhDj&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The idea here is to present an alternative to the CSS you’ve seen in other frameworks (with floats, padding, margin). I personally find it easier to read, easier to manipulate, and easier to control the variations that I want variations of when I avoid floats/margins/padding and instead I strictly use position absolute techniques like this post demonstrates.&lt;/p&gt;
&lt;p&gt;I find this specific technique valuable personally, so I wanted to share it with the internet.&lt;/p&gt;
&lt;p&gt;- Derek&lt;/p&gt;
&lt;hr&gt;
</description></item><item><title>Chrome DevTools Tips</title><link>undefined/articles/handy-chrome-devtools-tips/</link><pubDate>Mon, 16 Dec 2013 16:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/handy-chrome-devtools-tips/</guid><author></author><description>&lt;h4 id=&quot;or-what-i-wish-i-had-known-when-i-began-my-journey-as-a-web-developer&quot;&gt;Or what I wish I had known when I began my journey as a web developer&lt;/h4&gt;
&lt;p&gt;Learning how to use the &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/&quot;&gt;Google Chrome dev tools&lt;/a&gt; marked the inflection point in my journey towards becoming a web developer. When I started learning web development, I had heard vague rumblings of these tools, but didn’t put in too much time researching them, as I believed it was more important to first learn the “basics.” What is the DOM? How does it relate to HTML? How does CSS style an HTML element? And how does Javascript fit into all of this? I regret to report that I spent a lot of time reading through w3schools articles. &lt;/p&gt;
&lt;p&gt;I don’t think it’s an exaggeration to say that if I had just dove right in and started learning and playing with the dev tools, I would have learned so much more about all of these topics, and in a much more powerful, experiential way to boot.
The dev tools don’t just &lt;em&gt;tell&lt;/em&gt; you how the DOM works, they &lt;em&gt;show&lt;/em&gt; you.&lt;/p&gt;
&lt;p&gt;For today’s post, I’d like to walk you through some of the tips I learned after having used dev tools for a while that I’d wish I’d been shown on day one.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;toggle-element-state&quot;&gt;Toggle Element State&lt;/h3&gt;
&lt;p&gt;First, we have the “Toggle Element State” feature. This is an incredibly helpful feature which allows you to force the state of a particular element. For example, let’s says your style sheet contains the following rule:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.magical&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  ridge thick violet&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we want to see how elements with the magical class behave when we hover over them, but also want to interact with dev tool’s incredibly useful representation of the element’s &lt;a href=&quot;http://css-tricks.com/the-css-box-model/&quot;&gt;box model&lt;/a&gt; at the bottom of the “elements” panel? Well, normally we would lose the hover state styling when we move our mouse off the element, but with the dev tools, we can simply right click on the element, and select “:hover” from the “Force Element State” drop down menu.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://i.imgur.com/UZxJ2t7.png&quot;&gt;&lt;img src=&quot;http://i.imgur.com/UZxJ2t7.png&quot; alt=&quot;Hover&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The diversity of devices to develop for has proliferated profusely in the past decade. Thankfully, A &lt;a href=&quot;https://plus.google.com/u/0/+FrancoisBeaufort/posts/MxybHsjLjU6?cfem=1&quot;&gt;brand new feature&lt;/a&gt;, currently only available in Google’s cuttng edge browser, Chrome Canary, provides an effective way to test your website on multiple screens wihout needing to continuously move from device to device. Even cooler, the emulator contains a number of common device presets, which will automatically enable the following settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User agent&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screen Resolution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device Pixel Ratio&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emulate Viewport&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Autosizing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Touch Screen&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also emulate touch events, which is incredibly useful to avoid needing to push out code to a server and then load the new site on the device every time you make a change. To enable support for this feature:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the emulation panel in the DevTools&lt;/li&gt;
&lt;li&gt;Enable “Emulate touch screen” in the Sensors pane.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the relevant touch events: &lt;code&gt;touchstart&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, and &lt;code&gt;touchend&lt;/code&gt;, will now be triggered by your mouse action!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/viewport-emulation.gif&quot; alt=&quot;Touch&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;re-run-a-request-with-curl&quot;&gt;Re-run a request with curl&lt;/h3&gt;
&lt;p&gt;Here at DocuSign, we are building our node-backbone front-end to communicate with a REST API built in .NET. Sometimes we get API errors, and when researching the problem or filing an API bug report, it is helpful to be able quickly replicate the request which caused the error. The network panel has a command that does just this- creating a cURL representation of an HTTP request with its HTTP headers, SSL certificated, and query string parameters into a link on your clipboard, ready to be pasted into the terminal and executed. To create the cURL command, simply right-click on any network request in the netowkr pane and select “Copy as cURL” from the menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/curl.png&quot; alt=&quot;curl&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;frames-per-second&quot;&gt;Frames Per Second&lt;/h3&gt;
&lt;p&gt;One of my favorite features, hands-down, is the FPS Counter/HUD Display tool, which is fantastic for being able to measure in real-time how your site is performing. You can enable this by navigating to the Settings Menu and checking “Show FPS meter” You will then see the following display appear in the top-right corner of your page. This is especially great if you are working on a an app which involves a lot of user-interaction- you can see what actions slow the page down as the user peforms them, instead of having to switch back and forth with the Timeline view. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/chrome_fps.png&quot; alt=&quot;FPS&quot;&gt;&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the Chrome Dev Tool Tips we covered in this post. There are so many more amazing ones out there- Google itself has an &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks&quot;&gt;extensive list&lt;/a&gt;. Happy Hacking, and may the Chrome DevTools work forever in your favor!&lt;/p&gt;
</description></item><item><title>Custom Scalable CSS Radio Buttons</title><link>undefined/articles/custom-scalable-css-radio-buttons/</link><pubDate>Fri, 06 Dec 2013 00:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/custom-scalable-css-radio-buttons/</guid><author></author><description>&lt;p&gt;Radio buttons are essential when building forms and dialogs. Sadly enough, there are limited options for styling them. Developers might use one of the following methods to a certain degree of success:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.456bereastreet.com/lab/styling-form-controls-revisited/radio-button/&quot;&gt;width and height&lt;/a&gt;: unreliable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-tricks.com/forums/topic/webkit-transform-scale-not-scaling-larger-than-1-0/&quot;&gt;transform scale&lt;/a&gt;: not scaling more than certain size&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wufoo.com/2011/06/13/custom-radio-buttons-and-checkboxes/&quot;&gt;images&lt;/a&gt;: can’t scale graciously and can’t have gradients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, at DocuSign we have a very specific requirement — the user needs to be able to “zoom in” on the document and the radio buttons need to get bigger.&lt;/p&gt;
&lt;p&gt;We call this “scalable” css buttons, because we need many things to increase in size as we “zoom in” (such as the border thickness).&lt;/p&gt;
&lt;p&gt;We use CSS to re-draw the default HTML radio buttons. We did it by hiding the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field, using &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;s with the &lt;code&gt;for&lt;/code&gt; attribute and a nested div with &lt;code&gt;border-radius&lt;/code&gt;. This way developers can control radio buttons to a pixel (presumably with server-side or front-end width/top/left manipulation).
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The custom scalable CSS radio buttons demo:&lt;/p&gt;
&lt;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/DSYz7/8/embedded/result,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try the CSS radio button example yourself in &lt;a href=&quot;http://jsfiddle.net/DSYz7/4&quot;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To implement our custom CSS radio button, we’re using four containers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;wrapper: &lt;code&gt;.radio-tagger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;grey circle: &lt;code&gt;.radio-outer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;gradient circle: &lt;code&gt;.radio-inner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;blue select circle: &lt;code&gt;.radio-select&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hide the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element (but still keep it in DOM) and put the circles inside of the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;. This way when users click on the circles, the label will trigger a &lt;code&gt;change&lt;/code&gt; event on the input element.&lt;/p&gt;
&lt;p&gt;This is accomplished via the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes on label and input respectively.&lt;/p&gt;
&lt;p&gt;Here is the HTML code for a single button with the size of 20 pixels:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;div class=&amp;quot;radio-tagger&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;Radio-Group-Small&amp;quot; id=&amp;quot;radio1&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;radio1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-outer&amp;quot; style=&amp;quot;top: 4px; bottom: 4px; left: 4px; right: 4px;&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-inner&amp;quot; style=&amp;quot;top: 1px; bottom: 1px; left: 1px; right: 1px;&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-selected&amp;quot; style=&amp;quot;top: 2px; bottom: 2px; left: 2px; right: 2px;&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have inline styles because those elements are dynamically generated from a Backbone.js view. Changing of the button’s size is simple and could be done via jQuery, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'radio-tagger'&lt;/span&gt;).css({width:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;height:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px});
$(&lt;span class=&quot;string&quot;&gt;'radio-outer'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px
  });
$(&lt;span class=&quot;string&quot;&gt;'radio-inner'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px
});
$(&lt;span class=&quot;string&quot;&gt;'radio-selected'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result we’ll have a similar radio button (larger than the first) “perfectly” scaled with an increased border size when we “zoom in”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;div class=&amp;quot;radio-tagger&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; id=&amp;quot;radio2&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;radio2&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-outer&amp;quot; style=&amp;quot;top: 12px; bottom: 12px; left: 12px; right: 12px;&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;radio-inner&amp;quot; style=&amp;quot;top: 2px; bottom: 2px; left: 2px; right: 2px;&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;radio-selected&amp;quot; style=&amp;quot;top: 5px; bottom: 5px; left: 5px; right: 5px;&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Building a Redis Sentinel Client for Node.js</title><link>undefined/articles/redis-sentinel-client-nodejs/</link><pubDate>Tue, 12 Nov 2013 16:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/redis-sentinel-client-nodejs/</guid><author></author><description>&lt;p&gt;We use &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; for sessions and for a short-lived data cache in our &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; application.
Like any component in the system, there’s a potential risk of failure, and graceful failover to a “slave” instance is a way to mitigate the impact. We use &lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;&lt;strong&gt;Redis Sentinel&lt;/strong&gt;&lt;/a&gt; to help manage this failover process.&lt;/p&gt;
&lt;p&gt;As the &lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;docs&lt;/a&gt; describe,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis Sentinel is a &lt;strong&gt;distributed system&lt;/strong&gt;, this means that usually you want to run multiple Sentinel processes across your infrastructure, and this processes will use agreement protocols in order to understand if a master is down and to perform the failover.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially, each node server has its own sentinel corresponding to each redis cluster [master and slave(s)] that it connects to. We have one redis cluster, so &lt;strong&gt;for N node servers, there are N sentinels&lt;/strong&gt;. (This isn’t the only way to do it - there could be only one sentinel, or any other configuration really, but the 1:1 ratio seems to be the simplest.) Each sentinel is connected to the master and slaves to monitor their availability, as well as to the other sentinels. If the master goes down, the sentinels establish a “quorum” and agree on which slave to promote to master. They communicate this through their own pub/sub channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The sentinel is not a proxy&lt;/strong&gt; - the connection to the sentinel doesn’t &lt;em&gt;replace&lt;/em&gt; the connecton to the master - it’s a separate instance with the sole purpose of managing master/slave availability. So the app connects to the sentinel in parallel with the master connection, and listens to the chatter on the sentinel channels to know when a failover occurred. It then has to manage the reconnection to the new master on its own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/redis-sentinel-client-nodejs/redis-sentinel-diagram.pdf&quot;&gt;&lt;img src=&quot;/articles/redis-sentinel-client-nodejs/redis-sentinel-diagram.png&quot; alt=&quot;Redis Sentinel Client flow diagram&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re using the standard &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; library, which is robust, easy to use, and works “out of the box” for things like &lt;a href=&quot;https://github.com/visionmedia/connect-redis&quot;&gt;sessions&lt;/a&gt;. But a year ago, when Sentinel started to gain adoption, the best approach for adding &lt;a href=&quot;https://github.com/mranney/node_redis/issues/302&quot;&gt;&lt;strong&gt;Sentinel awareness&lt;/strong&gt;&lt;/a&gt; to node_redis clients wasn’t clear, so a thread started on Github to &lt;a href=&quot;https://github.com/mranney/node_redis/issues/302&quot;&gt;figure it out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One simple approach was for the application to simply hold two connections, for sentinel and master, and when the sentinel reports a failover, to reconnect the master. But the way node_redis works, any &lt;strong&gt;data in transit during the failover is lost&lt;/strong&gt;. Also with this approach, the code listening to the Sentinel’s pub/sub chatter lived in the application, and wasn’t as &lt;strong&gt;encapsulated&lt;/strong&gt; as we thought it should be.&lt;/p&gt;
&lt;p&gt;So we decided to create a middle tier, a &lt;strong&gt;redis sentinel client&lt;/strong&gt;, that would handle all this automatically.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
The goals were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Transparent, drop-in replacement&lt;/strong&gt; for a &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; client, handling connections to master, slave(s), and sentinel in the background.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handles all RedisClient commands&lt;/strong&gt; (including pub/sub).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No data loss&lt;/strong&gt; during failover.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result - still a work in progress - is the &lt;a href=&quot;https://github.com/DocuSignDev/node-redis-sentinel-client&quot;&gt;&lt;strong&gt;node-redis-sentinel-client&lt;/strong&gt;&lt;/a&gt; module. Initially we added it into a fork of node_redis itself, then we split it into its own &lt;a href=&quot;https://npmjs.org/package/redis-sentinel-client&quot;&gt;module&lt;/a&gt;, but still dependent on &lt;a href=&quot;https://github.com/DocuSignDev/node_redis&quot;&gt;our fork&lt;/a&gt; to export shared components and fix the data loss problem.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;RedisSentinelClient&lt;/code&gt; object holds three sub-clients (each a normal &lt;code&gt;RedisClient&lt;/code&gt; object): an &lt;code&gt;activeMasterClient&lt;/code&gt; which connects to the current master, a &lt;code&gt;sentinelTalker&lt;/code&gt; to read from the Sentinel, and a &lt;code&gt;sentinelListener&lt;/code&gt; to listen for failovers (because in node_redis’ pubsub mode, a client can only pub &lt;em&gt;or&lt;/em&gt; sub, not both.) All commands get proxied to the &lt;code&gt;activeMasterClient&lt;/code&gt;, and that client is reconnected to the new master after a failover.&lt;/p&gt;
&lt;p&gt;This has worked pretty well so far, including in production. We’ve never actually had a Redis failover in production, fortunately, but in all our tests, the client behaves well: the node processes temporarily lose connectivity, but once the failover completes, they resume gracefully with no data loss.&lt;/p&gt;
&lt;p&gt;There are still a few questions and problems with our solution, however:&lt;/p&gt;
&lt;p&gt;First, when the &lt;code&gt;RedisSentinelClient&lt;/code&gt; is first instantiated, if it can’t immediately connect, it doesn’t handle it very well. This is because of the way the &lt;code&gt;activeMasterClient&lt;/code&gt; is first set up, and a simple fix has been elusive. (It becomes “stable” only after this initial connection.)&lt;/p&gt;
&lt;p&gt;Second, this middle-tier solution &lt;strong&gt;might ultimately be too heavy&lt;/strong&gt;. Our Redis data is considered volatile: since it’s only for sessions and temporary caching, data loss is at worst a nuisance. So all the effort put into buffering data during a failover might be unnecessary. (On the other hand, Redis supports disk backup, and not every implementation is for volatile data, so a general-purpose solution could err on the side of robustness.)&lt;/p&gt;
&lt;p&gt;Third, the changes in our &lt;a href=&quot;https://github.com/DocuSignDev/node_redis&quot;&gt;fork&lt;/a&gt; to &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; (submitted as two &lt;a href=&quot;https://github.com/mranney/node_redis/pull/428&quot;&gt;pull&lt;/a&gt; &lt;a href=&quot;https://github.com/mranney/node_redis/pull/429&quot;&gt;requests&lt;/a&gt;) haven’t been accepted, probably because there still isn’t consensus on the right approach. It’s also possible (and a little surprising) that Sentinel itself hasn’t fully caught on. (Surprising because it solves a real problem very nicely, and lacks strong alternatives.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you use Redis Sentinel with node? How do you do it?&lt;/strong&gt; We’d love to hear about your experience or ideas in the comments.&lt;/p&gt;
</description></item><item><title>Hackathon!</title><link>undefined/articles/docusign-hackathon-2013/</link><pubDate>Sun, 27 Oct 2013 17:00:00 -0700</pubDate><guid isPermaLink="true">undefined/articles/docusign-hackathon-2013/</guid><author></author><description>&lt;p&gt;&lt;a href=&quot;/articles/docusign-hackathon-2013/hackathon2013-big.jpg&quot;&gt;&lt;img src=&quot;/articles/docusign-hackathon-2013/hackathon2013-big.jpg&quot; alt=&quot;DocuSign Hackathon 2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For two days last month, all the DocuSign engineering, design, and product development teams converged on San Francisco for a company hackathon. It was an opportunity to put aside sprint goals and product roadmaps for a little while, think completely out of the box, work with people we don’t usually work with, and build some awesome new features and prototypes.&lt;/p&gt;
&lt;p&gt;Some teams built internal tools to streamline our workflows and automate previously-manual processes. Many of the proofs-of-concept were customer-facing features that will be put on the product roadmap. One team imagined ways &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/getusermedia/intro/&quot;&gt;HTML5 camera support&lt;/a&gt; and real-time chat could be integrated into the product. Another project added real-time editing to our Send flow.
There was a visualization of DocuSign usage with dots all over a 3D globe, that we hope to put on a big screen in the office soon.&lt;/p&gt;
&lt;p&gt;One of the projects was creating this dev blog. So, welcome! We hope to introduce you to our great teams, show you all the cool stuff we build, open-source some of our code, and stimulate many interesting conversations.&lt;/p&gt;
</description></item></channel></rss>