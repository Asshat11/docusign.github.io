<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DocuSign Dev Blog</title><atom:link href="undefined/feed.xml" rel="self" type="application/rss+xml"></atom:link><link></link><description>Brought to you by the development teams at DocuSign</description><pubDate>Mon, 16 Dec 2013 16:00:00 -0800</pubDate><generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator><language>en</language><item><title>Chrome DevTools Tips</title><link>undefined/articles/handy-chrome-devtools-tips/</link><pubDate>Mon, 16 Dec 2013 16:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/handy-chrome-devtools-tips/</guid><author></author><description>&lt;h4 id=&quot;or-what-i-wish-i-had-known-when-i-began-my-journey-as-a-web-developer&quot;&gt;Or what I wish I had known when I began my journey as a web developer&lt;/h4&gt;
&lt;p&gt;Learning how to use the &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/&quot;&gt;Google Chrome dev tools&lt;/a&gt; marked the inflection point in my journey towards becoming a web developer. When I started learning web development, I had heard vague rumblings of these tools, but didn’t put in too much time researching them, as I believed it was more important to first learn the “basics.” What is the DOM? How does it relate to HTML? How does CSS style an HTML element? And how does Javascript fit into all of this? I regret to report that I spent a lot of time reading through w3schools articles. &lt;/p&gt;
&lt;p&gt;I don’t think it’s an exaggeration to say that if I had just dove right in and started learning and playing with the dev tools, I would have learned so much more about all of these topics, and in a much more powerful, experiential way to boot.
The dev tools don’t just &lt;em&gt;tell&lt;/em&gt; you how the DOM works, they &lt;em&gt;show&lt;/em&gt; you.&lt;/p&gt;
&lt;p&gt;For today’s post, I’d like to walk you through some of the tips I learned after having used dev tools for a while that I’d wish I’d been shown on day one.&lt;/p&gt;
&lt;h3 id=&quot;toggle-element-state&quot;&gt;Toggle Element State&lt;/h3&gt;
&lt;p&gt;First, we have the “Toggle Element State” feature. This is an incredibly helpful feature which allows you to force the state of a particular element. For example, let’s says your style sheet contains the following rule:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.magical&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;outline&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  ridge thick violet&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we want to see how elements with the magical class behave when we hover over them, but also want to interact with dev tool’s incredibly useful representation of the element’s &lt;a href=&quot;http://css-tricks.com/the-css-box-model/&quot;&gt;box model&lt;/a&gt; at the bottom of the “elements” panel? Well, normally we would lose the hover state styling when we move our mouse off the element, but with the dev tools, we can simply right click on the element, and select “:hover” from the “Force Element State” drop down menu.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://i.imgur.com/UZxJ2t7.png&quot;&gt;&lt;img src=&quot;http://i.imgur.com/UZxJ2t7.png&quot; alt=&quot;Hover&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The diversity of devices to develop for has proliferated profusely in the past decade. Thankfully, A &lt;a href=&quot;https://plus.google.com/u/0/+FrancoisBeaufort/posts/MxybHsjLjU6?cfem=1&quot;&gt;brand new feature&lt;/a&gt;, currently only available in Google’s cuttng edge browser, Chrome Canary, provides an effective way to test your website on multiple screens wihout needing to continuously move from device to device. Even cooler, the emulator contains a number of common device presets, which will automatically enable the following settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User agent&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screen Resolution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device Pixel Ratio&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emulate Viewport&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Autosizing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Touch Screen&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also emulate touch events, which is incredibly useful to avoid needing to push out code to a server and then load the new site on the device every time you make a change. To enable support for this feature:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the emulation panel in the DevTools&lt;/li&gt;
&lt;li&gt;Enable “Emulate touch screen” in the Sensors pane.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the relevant touch events: &lt;code&gt;touchstart&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, and &lt;code&gt;touchend&lt;/code&gt;, will now be triggered by your mouse action!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/viewport-emulation.gif&quot; alt=&quot;Touch&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;re-run-a-request-with-curl&quot;&gt;Re-run a request with curl&lt;/h3&gt;
&lt;p&gt;Here at DocuSign, we are building our node-backbone front-end to communicate with a REST API built in .NET. Sometimes we get API errors, and when researching the problem or filing an API bug report, it is helpful to be able quickly replicate the request which caused the error. The network panel has a command that does just this- creating a cURL representation of an HTTP request with its HTTP headers, SSL certificated, and query string parameters into a link on your clipboard, ready to be pasted into the terminal and executed. To create the cURL command, simply right-click on any network request in the netowkr pane and select “Copy as cURL” from the menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/curl.png&quot; alt=&quot;curl&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;frames-per-second&quot;&gt;Frames Per Second&lt;/h3&gt;
&lt;p&gt;One of my favorite features, hands-down, is the FPS Counter/HUD Display tool, which is fantastic for being able to measure in real-time how your site is performing. You can enable this by navigating to the Settings Menu and checking “Show FPS meter” You will then see the following display appear in the top-right corner of your page. This is especially great if you are working on a an app which involves a lot of user-interaction- you can see what actions slow the page down as the user peforms them, instead of having to switch back and forth with the Timeline view. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/handy-chrome-devtools-tips/chrome_fps.png&quot; alt=&quot;FPS&quot;&gt;&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the Chrome Dev Tool Tips we covered in this post. There are so many more amazing ones out there- Google itself has an &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks&quot;&gt;extensive list&lt;/a&gt;. Happy Hacking, and may the Chrome DevTools work forever in your favor!&lt;/p&gt;
</description></item><item><title>Custom Scalable CSS Radio Buttons</title><link>undefined/articles/custom-scalable-css-radio-buttons/</link><pubDate>Fri, 06 Dec 2013 00:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/custom-scalable-css-radio-buttons/</guid><author></author><description>&lt;p&gt;Radio buttons are essential when building forms and dialogs. Sadly enough, there are limited options for styling them. Developers might use one of the following methods to a certain degree of success:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.456bereastreet.com/lab/styling-form-controls-revisited/radio-button/&quot;&gt;width and height&lt;/a&gt;: unreliable&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-tricks.com/forums/topic/webkit-transform-scale-not-scaling-larger-than-1-0/&quot;&gt;transform scale&lt;/a&gt;: not scaling more than certain size&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wufoo.com/2011/06/13/custom-radio-buttons-and-checkboxes/&quot;&gt;images&lt;/a&gt;: can’t scale graciously and can’t have gradients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, at DocuSign we have a very specific requirement — the user needs to be able to “zoom in” on the document and the radio buttons need to get bigger.&lt;/p&gt;
&lt;p&gt;We call this “scalable” css buttons, because we need many things to increase in size as we “zoom in” (such as the border thickness).&lt;/p&gt;
&lt;p&gt;We use CSS to re-draw the default HTML radio buttons. We did it by hiding the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field, using &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;s with the &lt;code&gt;for&lt;/code&gt; attribute and a nested div with &lt;code&gt;border-radius&lt;/code&gt;. This way developers can control radio buttons to a pixel (presumably with server-side or front-end width/top/left manipulation).
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The custom scalable CSS radio buttons demo:&lt;/p&gt;
&lt;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/DSYz7/8/embedded/result,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try the CSS radio button example yourself in &lt;a href=&quot;http://jsfiddle.net/DSYz7/4&quot;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To implement our custom CSS radio button, we’re using four containers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;wrapper: &lt;code&gt;.radio-tagger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;grey circle: &lt;code&gt;.radio-outer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;gradient circle: &lt;code&gt;.radio-inner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;blue select circle: &lt;code&gt;.radio-select&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hide the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element (but still keep it in DOM) and put the circles inside of the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;. This way when users click on the circles, the label will trigger a &lt;code&gt;change&lt;/code&gt; event on the input element.&lt;/p&gt;
&lt;p&gt;This is accomplished via the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes on label and input respectively.&lt;/p&gt;
&lt;p&gt;Here is the HTML code for a single button with the size of 20 pixels:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;div class=&amp;quot;radio-tagger&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;Radio-Group-Small&amp;quot; id=&amp;quot;radio1&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;radio1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-outer&amp;quot; style=&amp;quot;top: 4px; bottom: 4px; left: 4px; right: 4px;&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-inner&amp;quot; style=&amp;quot;top: 1px; bottom: 1px; left: 1px; right: 1px;&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-selected&amp;quot; style=&amp;quot;top: 2px; bottom: 2px; left: 2px; right: 2px;&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have inline styles because those elements are dynamically generated from a Backbone.js view. Changing of the button’s size is simple and could be done via jQuery, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'radio-tagger'&lt;/span&gt;).css({width:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;height:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px});
$(&lt;span class=&quot;string&quot;&gt;'radio-outer'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;px
  });
$(&lt;span class=&quot;string&quot;&gt;'radio-inner'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px
});
$(&lt;span class=&quot;string&quot;&gt;'radio-selected'&lt;/span&gt;).css({
  top: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  bottom: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  left: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px;
  right: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result we’ll have a similar radio button (larger than the first) “perfectly” scaled with an increased border size when we “zoom in”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;div class=&amp;quot;radio-tagger&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; id=&amp;quot;radio2&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;radio2&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;radio-outer&amp;quot; style=&amp;quot;top: 12px; bottom: 12px; left: 12px; right: 12px;&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;radio-inner&amp;quot; style=&amp;quot;top: 2px; bottom: 2px; left: 2px; right: 2px;&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;radio-selected&amp;quot; style=&amp;quot;top: 5px; bottom: 5px; left: 5px; right: 5px;&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description></item><item><title>Building a Redis Sentinel Client for Node.js</title><link>undefined/articles/redis-sentinel-client-nodejs/</link><pubDate>Tue, 12 Nov 2013 16:00:00 -0800</pubDate><guid isPermaLink="true">undefined/articles/redis-sentinel-client-nodejs/</guid><author></author><description>&lt;p&gt;We use &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; for sessions and for a short-lived data cache in our &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; application.
Like any component in the system, there’s a potential risk of failure, and graceful failover to a “slave” instance is a way to mitigate the impact. We use &lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;&lt;strong&gt;Redis Sentinel&lt;/strong&gt;&lt;/a&gt; to help manage this failover process.&lt;/p&gt;
&lt;p&gt;As the &lt;a href=&quot;http://redis.io/topics/sentinel&quot;&gt;docs&lt;/a&gt; describe,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis Sentinel is a &lt;strong&gt;distributed system&lt;/strong&gt;, this means that usually you want to run multiple Sentinel processes across your infrastructure, and this processes will use agreement protocols in order to understand if a master is down and to perform the failover.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially, each node server has its own sentinel corresponding to each redis cluster [master and slave(s)] that it connects to. We have one redis cluster, so &lt;strong&gt;for N node servers, there are N sentinels&lt;/strong&gt;. (This isn’t the only way to do it - there could be only one sentinel, or any other configuration really, but the 1:1 ratio seems to be the simplest.) Each sentinel is connected to the master and slaves to monitor their availability, as well as to the other sentinels. If the master goes down, the sentinels establish a “quorum” and agree on which slave to promote to master. They communicate this through their own pub/sub channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The sentinel is not a proxy&lt;/strong&gt; - the connection to the sentinel doesn’t &lt;em&gt;replace&lt;/em&gt; the connecton to the master - it’s a separate instance with the sole purpose of managing master/slave availability. So the app connects to the sentinel in parallel with the master connection, and listens to the chatter on the sentinel channels to know when a failover occurred. It then has to manage the reconnection to the new master on its own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/redis-sentinel-client-nodejs/redis-sentinel-diagram.pdf&quot;&gt;&lt;img src=&quot;/articles/redis-sentinel-client-nodejs/redis-sentinel-diagram.png&quot; alt=&quot;Redis Sentinel Client flow diagram&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re using the standard &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; library, which is robust, easy to use, and works “out of the box” for things like &lt;a href=&quot;https://github.com/visionmedia/connect-redis&quot;&gt;sessions&lt;/a&gt;. But a year ago, when Sentinel started to gain adoption, the best approach for adding &lt;a href=&quot;https://github.com/mranney/node_redis/issues/302&quot;&gt;&lt;strong&gt;Sentinel awareness&lt;/strong&gt;&lt;/a&gt; to node_redis clients wasn’t clear, so a thread started on Github to &lt;a href=&quot;https://github.com/mranney/node_redis/issues/302&quot;&gt;figure it out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One simple approach was for the application to simply hold two connections, for sentinel and master, and when the sentinel reports a failover, to reconnect the master. But the way node_redis works, any &lt;strong&gt;data in transit during the failover is lost&lt;/strong&gt;. Also with this approach, the code listening to the Sentinel’s pub/sub chatter lived in the application, and wasn’t as &lt;strong&gt;encapsulated&lt;/strong&gt; as we thought it should be.&lt;/p&gt;
&lt;p&gt;So we decided to create a middle tier, a &lt;strong&gt;redis sentinel client&lt;/strong&gt;, that would handle all this automatically.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
The goals were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Transparent, drop-in replacement&lt;/strong&gt; for a &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; client, handling connections to master, slave(s), and sentinel in the background.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handles all RedisClient commands&lt;/strong&gt; (including pub/sub).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No data loss&lt;/strong&gt; during failover.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result - still a work in progress - is the &lt;a href=&quot;https://github.com/DocuSignDev/node-redis-sentinel-client&quot;&gt;&lt;strong&gt;node-redis-sentinel-client&lt;/strong&gt;&lt;/a&gt; module. Initially we added it into a fork of node_redis itself, then we split it into its own &lt;a href=&quot;https://npmjs.org/package/redis-sentinel-client&quot;&gt;module&lt;/a&gt;, but still dependent on &lt;a href=&quot;https://github.com/DocuSignDev/node_redis&quot;&gt;our fork&lt;/a&gt; to export shared components and fix the data loss problem.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;RedisSentinelClient&lt;/code&gt; object holds three sub-clients (each a normal &lt;code&gt;RedisClient&lt;/code&gt; object): an &lt;code&gt;activeMasterClient&lt;/code&gt; which connects to the current master, a &lt;code&gt;sentinelTalker&lt;/code&gt; to read from the Sentinel, and a &lt;code&gt;sentinelListener&lt;/code&gt; to listen for failovers (because in node_redis’ pubsub mode, a client can only pub &lt;em&gt;or&lt;/em&gt; sub, not both.) All commands get proxied to the &lt;code&gt;activeMasterClient&lt;/code&gt;, and that client is reconnected to the new master after a failover.&lt;/p&gt;
&lt;p&gt;This has worked pretty well so far, including in production. We’ve never actually had a Redis failover in production, fortunately, but in all our tests, the client behaves well: the node processes temporarily lose connectivity, but once the failover completes, they resume gracefully with no data loss.&lt;/p&gt;
&lt;p&gt;There are still a few questions and problems with our solution, however:&lt;/p&gt;
&lt;p&gt;First, when the &lt;code&gt;RedisSentinelClient&lt;/code&gt; is first instantiated, if it can’t immediately connect, it doesn’t handle it very well. This is because of the way the &lt;code&gt;activeMasterClient&lt;/code&gt; is first set up, and a simple fix has been elusive. (It becomes “stable” only after this initial connection.)&lt;/p&gt;
&lt;p&gt;Second, this middle-tier solution &lt;strong&gt;might ultimately be too heavy&lt;/strong&gt;. Our Redis data is considered volatile: since it’s only for sessions and temporary caching, data loss is at worst a nuisance. So all the effort put into buffering data during a failover might be unnecessary. (On the other hand, Redis supports disk backup, and not every implementation is for volatile data, so a general-purpose solution could err on the side of robustness.)&lt;/p&gt;
&lt;p&gt;Third, the changes in our &lt;a href=&quot;https://github.com/DocuSignDev/node_redis&quot;&gt;fork&lt;/a&gt; to &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis&lt;/a&gt; (submitted as two &lt;a href=&quot;https://github.com/mranney/node_redis/pull/428&quot;&gt;pull&lt;/a&gt; &lt;a href=&quot;https://github.com/mranney/node_redis/pull/429&quot;&gt;requests&lt;/a&gt;) haven’t been accepted, probably because there still isn’t consensus on the right approach. It’s also possible (and a little surprising) that Sentinel itself hasn’t fully caught on. (Surprising because it solves a real problem very nicely, and lacks strong alternatives.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you use Redis Sentinel with node? How do you do it?&lt;/strong&gt; We’d love to hear about your experience or ideas in the comments.&lt;/p&gt;
</description></item><item><title>Hackathon!</title><link>undefined/articles/docusign-hackathon-2013/</link><pubDate>Sun, 27 Oct 2013 17:00:00 -0700</pubDate><guid isPermaLink="true">undefined/articles/docusign-hackathon-2013/</guid><author></author><description>&lt;p&gt;&lt;a href=&quot;/articles/docusign-hackathon-2013/hackathon2013-big.jpg&quot;&gt;&lt;img src=&quot;/articles/docusign-hackathon-2013/hackathon2013-big.jpg&quot; alt=&quot;DocuSign Hackathon 2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For two days last month, all the DocuSign engineering, design, and product development teams converged on San Francisco for a company hackathon. It was an opportunity to put aside sprint goals and product roadmaps for a little while, think completely out of the box, work with people we don’t usually work with, and build some awesome new features and prototypes.&lt;/p&gt;
&lt;p&gt;Some teams built internal tools to streamline our workflows and automate previously-manual processes. Many of the proofs-of-concept were customer-facing features that will be put on the product roadmap. One team imagined ways &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/getusermedia/intro/&quot;&gt;HTML5 camera support&lt;/a&gt; and real-time chat could be integrated into the product. Another project added real-time editing to our Send flow.
There was a visualization of DocuSign usage with dots all over a 3D globe, that we hope to put on a big screen in the office soon.&lt;/p&gt;
&lt;p&gt;One of the projects was creating this dev blog. So, welcome! We hope to introduce you to our great teams, show you all the cool stuff we build, open-source some of our code, and stimulate many interesting conversations.&lt;/p&gt;
</description></item></channel></rss>